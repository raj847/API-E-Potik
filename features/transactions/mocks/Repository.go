// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	transactions "minpro_arya/features/transactions"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAllCustomerTrans provides a mock function with given fields: customerID
func (_m *Repository) GetAllCustomerTrans(customerID int) ([]transactions.Domain, error) {
	ret := _m.Called(customerID)

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func(int) []transactions.Domain); ok {
		r0 = rf(customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTrans provides a mock function with given fields:
func (_m *Repository) GetAllTrans() ([]transactions.Domain, error) {
	ret := _m.Called()

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func() []transactions.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransByID provides a mock function with given fields: id
func (_m *Repository) GetTransByID(id int) (transactions.Domain, error) {
	ret := _m.Called(id)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(int) transactions.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Trans provides a mock function with given fields: customerID, domain
func (_m *Repository) Trans(customerID int, domain *transactions.Domain) (transactions.Domain, error) {
	ret := _m.Called(customerID, domain)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(int, *transactions.Domain) transactions.Domain); ok {
		r0 = rf(customerID, domain)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *transactions.Domain) error); ok {
		r1 = rf(customerID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
